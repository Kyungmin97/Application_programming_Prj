
var _dateFmt = "yyyy.mm.dd";	// 날짜 형식의 데이터 포맷


///////////////////////////////////////////////////////////////////////////////////
// 사용자정의 Date 프로토타입
///////////////////////////////////////////////////////////////////////////////////
	/**
	 * 날짜 형식으로 변환 (날짜 포맷은 _dateFmt 에 정의되어 있음)
	 * String prototype에 정의되어있는 toDateFmt와 동일한 결과 반환
	 */
	Date.prototype.toDateFmt = function() {
		var _date = this;
		var r_yy = _date.getFullYear();
		var r_mm = _date.getMonth() + 1;
		var r_dd = _date.getDate();

		r_mm = (r_mm < 10) ? "0" + r_mm : r_mm;
		r_dd = (r_dd < 10) ? "0" + r_dd : r_dd;

		var r_date = r_yy.toString() + r_mm.toString() + r_dd.toString();

		return r_date.toDateFmt();
	};

///////////////////////////////////////////////////////////////////////////////////
// 사용자정의 String 프로토타입
///////////////////////////////////////////////////////////////////////////////////
	/**
	 * lpad
	 */
	String.prototype.lpad = function(padString, length) {
		var str = this;
		while (str.length < length)
			str = padString + str;
		return str;
	};

	/**
	 * 앞뒤 공백 문자열 제거
	 * @example " abcd  ".trim()
	 */
	String.prototype.trim = function() {
		return this.replace(/^\s*/,"").replace(/\s*$/,"");
	};

	/**
	 * 좌측 공백 문자 제거
	 * @example " abcd".ltrim()
	 */
	String.prototype.ltrim = function() {
		return this.replace(/(^\s*)/, "");
	};

	/**
	 * 우측 공백문자 제거
	 * @example "abcd  ".rtrim()
	 */
	String.prototype.rtrim = function() {
		return this.replace(/(\s*$)/, "");
	};
	/**
	 * 날짜,금액,숫자 형식에서 특수문자(-.,/:)들 제거
	 * @example "2012/12/12".removeFmt()
	 */
	String.prototype.removeFmt = function() {
		return this.replace(/[-|.|,|:|\/]/gi,"");
	};

	/**
	 * 금액,숫자 형식에서 comma만 제거
	 * @example "-12,021,345.6789".removeNumberFmt()
	 */
	String.prototype.removeNumberFmt = function() {
		return this.replace(/,/gi,"");
	};

	/**
	 * 컴마 붙은 숫자 형식으로 문자열 반환(자연수)
	 * @example
	 * "1000000000".toNumberFmt() => 1,000,000,000
	 */
	String.prototype.toNumberFmt = function() {
		var PATTERN = /(\d)(?=(?:\d{3})+(?!\d))/g;
		var str = this.removeFmt();

		return str.replace(PATTERN,'$1,');
	};

	/**
	 * 컴마 붙은 숫자 형식으로 문자열 반환(정수)
	 * @example
	 * "1000000000".toIntegerFmt() => 1,000,000,000
	 */
	String.prototype.toIntegerFmt = function() {
		return this.toNumberFmt();
	};

	/**
	 * 주민등록번호 형식으로 반환
	 * @example
	 * "7712311100008".toCtzNoFmt() => 771231-1100008
	 */
	String.prototype.toCtzNoFmt = function() {
		var PATTERN = /^(\d{6})(\d{7})$/g;
		var str = this.removeFmt();

		if (!str.isNumber()) return "";

		return str.replace(PATTERN,'$1-$2');
	};

	/**
	 * 사업자번호 등록 형식으로 반환
	 * @example
	 * "2170520894".toBizNoFmt() => 771231-1100008
	 */
	String.prototype.toBizNoFmt = function() {
		var PATTERN = /^(\d{3})(\d{2})(\d{5})$/g;
		var str = this.removeFmt();

		if (!str.isBizNo()) return "";

		return str.replace(PATTERN,'$1-$2-$3');
	};

	/**
	 * 우편번호 형식으로 반환
	 * 단, 자리수가 6자리가아니면 포맷팅 안한다(해외 주소 때문)
	 * @example
	 * "123456".toPostNoFmt() => 123-456
	 */
	String.prototype.toPostNoFmt = function() {
		var PATTERN = /^(\d{3})(\d{3})$/g;
		var str = this.removeFmt();

		if (str.length != 6) return this;

		return str.replace(PATTERN,'$1-$2');
	};

	/**
	 * 컴마 붙은 숫자 형식으로 문자열 반환(정수)
	 * @example
	 * "1000000000".toMoneyFmt() => 1,000,000,000
	 */
	String.prototype.toMoneyFmt = function() {
		return this.toNumberFmt();
	};

	/**
	 * 날짜 형식으로 변환 (날짜 포맷은 _dateFmt 에 정의되어 있음)
	 * yyyymmdd(년월일), yyyymm(년월) 모두 처리 가능
	 * @returns String형의날짜포맷
	 * @example
	 * "2010-01-01".toDateFmt() => 2010.01.01
	 * "2010/01/01".toDateFmt() => 2010.01.01
	 * "20100101".toDateFmt() => 2010.01.01
	 * "2010-01".toDateFmt() => 2010.01
	 * "2010/01".toDateFmt() => 2010.01
	 * "201001".toDateFmt() => 2010.01
	 */
	String.prototype.toDateFmt = function() {
		var PATTERN;
		var rep_str;
		var str = this.removeFmt();

		if (!this.isDate()) return "";

		if (str.length == 8) {
			PATTERN = /^(\d{4})(\d{1,2})(\d{1,2})$/g;
			rep_str = _dateFmt.replace("yyyy","$1").replace("mm","$2").replace("dd","$3");
		} else if (str.length == 6) {
			PATTERN = /^(\d{4})(\d{1,2})$/g;
			rep_str = _dateFmt.substr(0,7).replace("yyyy","$1").replace("mm","$2");
		} else {
			return "";
		}
		return str.replace(PATTERN,rep_str);
	};

	/**
	 * 날짜형으로 변환
	 * @returns 날짜형, 날짜에 오류가 있을 경우엔 빈값 반환
	 * @example
	 * "2010-01-01".toDateFmt() => Fri Jan 1 00:00:00 UTC+0900 2010
	 * "2010/01/01".toDateFmt() => Fri Jan 1 00:00:00 UTC+0900 2010
	 * "20100101".toDateFmt() => Fri Jan 1 00:00:00 UTC+0900 2010
	 */
	String.prototype.toDate = function() {
		var str = this.removeFmt();

		if (!this.isDate()) return "";

		if (str.length == 8) {
			return new Date(str.substr(0,4)+"/"+str.substr(4,2)+"/"+str.substr(6,2));
		} else {
			return "";
		}
	};

	/**
	 * 시간형식으로 포맷 변환 (1231 => 12:31)
	 * @example "1231".toTimeFormat()
	 * @returns 시간:분 형태의 문자열, 변환 오류날경우 "" 문자 반환
	 */
	String.prototype.toTimeFmt = function() {
		var PATTERN = /^(\d{2})(\d{2})$/g;
		var str = this.removeFmt();

		if (!str.isTime()) return "";

		return str.replace(PATTERN,'$1:$2');
	};


	/**
	 * 카멜표기법으로 변환
	 * @example "emp_id".toCamel()
	 */
	String.prototype.toCamel = function() {
		return this.replace(/(\_[a-z])/g, function($1){return $1.toUpperCase().replace('_','');});
	};

	/**
	 * 언더스코어표기법으로 변환
	 * @example "empId".toUnderscore()
	 */
	String.prototype.toUnderscore = function() {
		return this.replace(/([A-Z])/g, function($1){return "_"+$1.toLowerCase();});
	};

	/**
	 * 문자열의 숫자 검사
	 * @returns true/false
	 * @example "123".isNumber()
	 */
	String.prototype.isNumber = function() {
		var PATTERN = /^[0-9]*$/;
		return PATTERN.test(this);
	};

	/**
	 * 문자열의 정수 검사(음수/양수)
	 * @returns true/false
	 * @example "-123".isInteger()
	 */
	String.prototype.isInteger = function() {
		var PATTERN = /^[+-]?[0-9]*$/;
		return PATTERN.test(this);
	};

	/**
	 * 문자열의 실수 검사(음수/양수/실수)
	 * @returns true/false
	 * @example "-123.99".isFloat()
	 */
	String.prototype.isFloat = function() {
		var PATTERN = /^[+-]?[0-9]*(\.?\d*)$/;
		return PATTERN.test(this);
	};

	/**
	 * 통화 형식으로 되어있는지 검사
	 * @returns true/false
	 * @example "-100,000.89".isMoney()
	 */
	String.prototype.isMoney = function() {
		var PATTERN = /^[+-]?[0-9,.]*$/;
		return PATTERN.test(this);
	};

	/**
	 * 일반 Text Data를 HTML 포맷으로 바꾼다. /r/n을 &lt;br&gt;로 바꾸어 준다.
	 * @return HTML String
	 * @example "aaaaa".toHTML();
	 */
	String.prototype.toHTML = function() {
		var PATTERN = /\n/g;
		return this.replace(PATTERN,'<br>');
	};


	/**
	 * HTML 포맷의 데이터중 &lt;br&gt; 인 부분을 전부 /r/n으로 바꾼다.
	 * @return TEXT String
	 * @example "aaaaa".toTEXT();
	 */
	String.prototype.toTEXT = function() {
		var PATTERN = /<br>/g;
		return this.replace(PATTERN,'\n');
	};

	/**
	 * 글내용 보여줄 때 html 태그까지 보여주도록 함
	 * @return TEXT String
	 * @example "aaaaa".escapeHTML();
	 */
	String.prototype.escapeHTML = function() {
		var src = this;
		src = src.replace(/</g, "&lt;");
		src = src.replace(/>/g, "&gt;");
		src = src.replace(/\"/g, "&quot;");
		src = src.replace(/\n/g, "<br>"); // 이 코드는 맨 아래 위치하도록 한다.
		return src;
	};

	/**
	 * 글내용 보여줄 때 html 태그까지 보여주도록 함
	 * @return TEXT String
	 * @example "aaaaa".unescapeHTML();
	 */
	String.prototype.unescapeHTML = function() {
		var src = this;
		src = src.replace(/&lt;/g, "<");
		src = src.replace(/&gt;/g, ">");
		src = src.replace(/&quot;/g, "\"");
		src = src.replace(/&amp;/g, "&");
		src = src.replace(/&#34;/g, "\"");
		src = src.replace(/&#39;/g, "\'");	// lucy-xss 1.6.3에서 변환시
		src = src.replace(/&#39/g, "\'");	// lucy-xss 1.6.2에서 변환시
		return src;
	};
	
	/**
	 * 올바른 날짜 형식여부 검사 (년월일, 년월 검사 가능)
	 * javascript의 Date함수를 이용하여 날짜 검사할 경우
	 * 2012-12-32는 오류로 안보고 2013-01-01과 으로 인식하기 때문에
	 * Date함수 이용안하고 년,월,일 사용가능한 날짜를 기준으로해서 검사함
	 * @returns true/false
	 * @example
	 * "2012-12-31".isDate()
	 * "20121231".isDate()
	 * "201212".isDate()
	 */
	String.prototype.isDate = function() {
		var str = this.removeFmt();
		if (str.length == 8) {	// yyyy-mm-dd 검사
			var year = str.substr(0,4);
		    var month = str.substr(4,2);
		    var day = str.substr(6,2);

		    if (month < 1 || month > 12) return false;
		    if (day < 1 || day > 31) return false;
		    if ((month==4 || month==6 || month==9 || month==11) && day==31) return false;
		    if (month == 2) {
		        var isleap = (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0));

		        if (day>29 || (day==29 && !isleap)) return false;
		    }
		} else if (str.length == 6) { // yyyy-mm 검사
		    var month = str.substr(4,2);

		    if (month < 1 || month > 12) return false;
		} else {
			return false;
		}

	    return true;
	};

	/**
	 * 시간 형식인지 확인 (시간 :0~24, 분 : 0 ~ 59)
	 * @example "12:31".isTime()
	 * @returns true/false
	 */
	String.prototype.isTime = function() {
		var str = this.removeFmt();
		if (str.length != 4) return false;

		var hh = parseInt(str.substr(0,2));
		var mm = parseInt(str.substr(2,2));

		if (0 > hh || hh > 24) return false;
		if (0 > mm || mm > 59) return false;

		return true;
	};

	/**
	 * 주민등록번호 유효성 검사
	 * @returns true/false
	 * @example
	 * "771231-1100008".isCtzNo()
	 * "7712311100008".isCtzNo()
	 */
	String.prototype.isCtzNo = function() {
		var aObjMultiliers1= new Array(2, 3, 4, 5, 6, 7);
		var aObjMultiliers2= new Array(8, 9, 2, 3, 4, 5);
		var sum=0, sum1=0, sum2=0;
		var sLength1, sLength2;
		var str1, str2;

		var str = this.removeFmt();

		if (str.length != 13) return false;

		str1 = str.substr(0,6);
		str2 = str.substr(6,7);

		if (str2.charAt(0) == "0" || str2.charAt(0) == "9") {
			//1~8까지만 유효
			return false;
		}


		sLength1=str1.length;
		sLength2=str2.length;

		if(sLength1<6 || sLength2<7) return false;

		for(var i=0 ; i<6; i++) {
			sum1+=parseInt(str1.charAt(i), 10)*aObjMultiliers1[i];
			sum2+=parseInt(str2.charAt(i), 10)*aObjMultiliers2[i];
		}
		sum=sum1+sum2;
		var checker=(11-(sum%11))%10;

		if (str2.charAt(0) == "5" || str2.charAt(0) == "6" || str2.charAt(0) == "7" || str2.charAt(0) == "8") {
			//외국인등록번호 등인 경우 +2
			checker = (checker + 2) % 10;
		}

		if(checker==parseInt(str2.charAt(6), 10)) return true;
		else return false;
	};

	/**
	 * 사업자등록번호검사
	 * @returns true/false
	 * @example
	 * "217-05-20894".isBizNo()
	 * "2170520894".isBizNo()
	 */
	String.prototype.isBizNo = function() {
		var str = this.removeFmt();
		var checkID = new Array(1, 3, 7, 1, 3, 7, 1, 3, 5, 1);
		var i, chkSum=0, c2, remander;

		for (i=0; i<=7; i++) chkSum += checkID[i] * str.charAt(i);

		c2 = "0" + (checkID[8] * str.charAt(8));
		c2 = c2.substring(c2.length - 2, c2.length);

		chkSum += Math.floor(c2.charAt(0)) + Math.floor(c2.charAt(1));
		remander = (10 - (chkSum % 10)) % 10 ;

		if (Math.floor(str.charAt(9)) == remander) return true ; // OK!
		return false;
	};

	/**
	 * 영문 문자열만 있는지 확인
	 * @returns true/false
	 */
	String.prototype.isEng = function() {
		return (/^[a-zA-Z]+$/).test(this) ? true : false;
	};

	/**
	 * 숫자와 영어만 허용
	 * @returns true/false
	 */
	String.prototype.isEngNum = function() {
	    return (/^[0-9a-zA-Z]+$/).test(this) ? true : false;
	};

	/**
	 * 영문과 숫자가 포함되어있는지 검사
	 * @returns true/false
	 */
	String.prototype.isIncludeEngNum = function() {
		var search_num = this.search(/[0-9]/g);
		var search_eng = this.search(/[a-zA-Z]/g);
		if (search_num < 0 || search_eng < 0) {
			return false;
		}

		return true;
	};
	
	/**
	 * 한글 마지막글자의 조사 판단
	 * 경고창 메시지 만들때 을/를, 이/가, 은/는 등의 메시지를 매끄럽게 만들기 위함
	 * @example
	 * alert("김창수".toJosa("은","는"));
	 * alert("손민창".toJosa("은","는"));
	 */
	String.prototype.toJosa = function(str1, str2) {
	    return this + ((this.charCodeAt(this.length - 1) - 0xAC00) % 28 ? str1 : str2);
	};

	/**
	 * 파일 확장자 가져오기
	 */
	String.prototype.getFileExt = function() {
		return (this.indexOf(".") < 0) ? "" : this.substring(this.lastIndexOf(".") + 1, this.length);
	};

	/**
	 * 바이트로 계산해서 문자열 길이 가져오기(한글 1문자는 3bytes로 계산함)
	 */
	String.prototype.getByteLength= function() {
		var str = this;
		var byte_len = 0;
		for (var i=0;i<str.length;i++) {
			var ch = str.charAt(i);
			if (escape(ch).length > 4) {
				byte_len +=3;
			} else {
				byte_len++;
			}
		}
		return byte_len;
	};
	
	/**
	 * 이메일체크
	 */
	String.prototype.isEmail = function() {
		var re = /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
		return re.test(this);
	};

	/**
	 * url 체크
	 */
	String.prototype.isUrl = function() {
		var re = /(ftp|http|https):\/\/(\w+:{0,1}\w*@)?(\S+)(:[0-9]+)?(\/|\/([\w#!:.?+=&%@!\-\/]))?/;
	    return re.test(this);
	};

