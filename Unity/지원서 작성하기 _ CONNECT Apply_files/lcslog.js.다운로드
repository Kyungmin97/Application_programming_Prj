/**
 * lcslog.js  v 0.5.00
 * Last Updated: 2017-04-18
 * Author : Log-Data
 * Copyright 2017 NHN Corp. All rights Reserved.
 * NHN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.
 *
 * This code includes some part of the
 * "Flash Player Detection Kit Revision 1.5" by Michael Williams
 * & Copyright 2005-2007 Adobe Macromedia Softward.LLC. All rights reserved.
 */

var lcs_add = {};
var lcs_bc = {};

var lcs_ver = "v0.5.00";
var lcs_cnt = 0;

function lcs_do( etc ) {
    // TODO : check lcs server name!!
    if (!window.lcs_SerName) { window.lcs_SerName = "lcs.naver.com"; }

    var rs = "";
    var index;
    var doc = document;
    var wlt = window.location;

    try {
        var lcs_Addr = (wlt.protocol ? wlt.protocol : "http:")+"//" + window.lcs_SerName + "/m?";
    } catch(e){ return; }

    try {
        rs = lcs_Addr + "u=" + encodeURIComponent(wlt.href)
            + "&e=" + (doc.referrer ? encodeURIComponent(doc.referrer) : "");
    } catch(e) {
    }

    try {

    if (typeof lcs_add.i == 'undefined' )
        lcs_add.i = "";

    for( var index in lcs_add)
    {
        if( typeof lcs_add[index] != 'function' )
            rs += "&" + index + "=" + encodeURIComponent(lcs_add[index]);
    }

    for( var index in etc )
    {
        if ( (index.length >= 3 && (typeof etc[index] != 'function')) || index == 'qy')
        {
            rs += "&" + index + "=" + encodeURIComponent(etc[index]);
        }
    }


    if(lcs_cnt < 1)
    {
        lcs_getBrowserCapa();
    }

    for( var index in lcs_bc )
    {
        if( typeof lcs_bc[index] != 'function' )
            rs += "&" + index + "=" + encodeURIComponent(lcs_bc[index]);
    }


    // From 2016.7.20, we decided to put timestamp in every lcs log's request URI.
    // The reason for this is to prevent some browser XHR(XML HTTP Request) request cache. 
    // Here is the browser list doing cache like this.
    // 1. Chrome mobile

    var timeStr = (new Date).getTime();
    rs += "&ts=" + timeStr;

    rs += "&EOU";

    var obj = document.createElement('img')
    obj.src = rs;
    obj.onload = function() { obj.onload = null; return; }

    lcs_cnt++;

    } catch(e) {
        return;
    }
}

function lcs_do_gdid( gdid , etc) {

    try {
        if (gdid) {
            lcs_add["i"] = gdid;

            if (etc){
                lcs_do(etc);
            } else {
                lcs_do();
            }

        }
    } catch (e) {
    }
}

function lcs_getBrowserCapa() {
    lcs_getOS();

    lcs_getlanguage();

    lcs_getScreen();

    lcs_getWindowSize();

    lcs_getColorDepth();

    lcs_getJavaEnabled();

    lcs_getCookieEnabled();

}

function lcs_getOS() {
    var lcs_os = "";
    try {
        (navigator.platform ? lcs_os = navigator.platform : "");
    } catch (e) {
    }
    lcs_bc["os"] = lcs_os;
}

function lcs_getlanguage() {
    var lcs_ln = "";
    try {
        (navigator.userLanguage? lcs_ln = navigator.userLanguage : (navigator.language)? lcs_ln = navigator.language : "");
    } catch (e) {
    }

    lcs_bc["ln"] = lcs_ln;
}

function lcs_getScreen() {
    var lcs_sr = "";
    var pixelRatio = 0 ;
    
    try {
    	if ( window.screen && screen.width && screen.height)
    	{
    		lcs_sr = screen.width + 'x'+ screen.height;
                    
    		pixelRatio = window.devicePixelRatio;

    		if ( (pixelRatio) && (pixelRatio != 1) ){
    			lcs_sr = ( screen.width * pixelRatio ) + 'x' +( screen.height * pixelRatio ) ; 
    		}
    	}
    	else if ( window.java || self.java ) 
    	{
    		var sr = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
    		lcs_sr = sr.width + 'x' + sr.height;

    	}
	} catch(e) {
        lcs_sr = "";
    }
    
    lcs_bc["sr"] = lcs_sr;
}


function lcs_getWindowSize() {
    var doc = document;

    lcs_bc["bw"] = '';
    lcs_bc["bh"] = '';
    try {
        lcs_bc["bw"] = doc.documentElement.clientWidth ? doc.documentElement.clientWidth : doc.body.clientWidth;
        lcs_bc["bh"] = doc.documentElement.clientHeight ? doc.documentElement.clientHeight : doc.body.clientHeight;
    }
    catch(e) {
    }
}

function lcs_getColorDepth(){
    lcs_bc["c"] = "";
    try {
        if (window.screen) {
            lcs_bc["c"] = screen.colorDepth ? screen.colorDepth : screen.pixelDepth;
        }
        else if (window.java || self.java ) {
            var c = java.awt.Toolkit.getDefaultToolkit().getColorModel().getPixelSize();
            lcs_bc["c"] = c;
        }
    } catch (e) {
        lcs_bc["c"] = "";
    }
}

function lcs_getJavaEnabled() {
    lcs_bc["j"] = "";
    try {
        lcs_bc["j"]= navigator.javaEnabled() ? "Y":"N";
    } catch (e) {}

}

function lcs_getCookieEnabled() {
    lcs_bc["k"] = "";
    try {
        lcs_bc["k"]= navigator.cookieEnabled ? "Y":"N";
    } catch (e) {
    }

}


